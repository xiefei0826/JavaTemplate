apiVersion: v1
kind: PersistentVolume
metadata:
  name: data-mysql-pv
spec:
  capacity:
    storage: 10Gi
  persistentVolumeReclaimPolicy: Retain
  nfs:
    path: /nas/data/mysql
    server: dev
  accessModes:
    - ReadWriteOnce
    - ReadOnlyMany
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: data-mysql-pvc
spec:
  resources:
    requests:
      storage: 10Gi
  accessModes:
    - ReadWriteOnce
  storageClassName: ""

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: data-mysql
spec:
  selector:
    matchLabels:
      app: mysql
  serviceName: mysql
  template:
    metadata:
      name: mysql
      labels:
        app: mysql
    spec:
      volumes:
        - name: data-mysql
          persistentVolumeClaim:
            claimName: data-mysql-pvc
      containers:
        - name: mysql
          image: mysql:8.0.21
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: example2020!@#
          ports:
            - containerPort: 3306
          volumeMounts:
            - mountPath: /var/lib/mysql
              name: data-mysql
          args:
            - '--character-set-server=utf8mb4'
            - '--collation-server=utf8mb4_unicode_ci'
          resources:
            limits:
              cpu: "1"
              memory: "1Gi"
            requests:
              cpu: "0.5"
              memory: "200Mi"
      hostname: mysql
---
apiVersion: v1
kind: Service
metadata:
  name: data-mysql
spec:
  selector:
    app: mysql
  ports:
    - port: 3306
  type: NodePort
  externalIPs:
    - 192.168.1.131

---

apiVersion: v1
kind: PersistentVolume
metadata:
  name: data-redis-pv
spec:
  capacity:
    storage: 1G
  persistentVolumeReclaimPolicy: Retain
  nfs:
    path: /nas/data/redis
    server: dev
  accessModes:
    - ReadWriteOnce
    - ReadOnlyMany
---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: data-redis-pvc
spec:
  resources:
    requests:
      storage: 1G
  accessModes:
    - ReadWriteOnce
  storageClassName: ""

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: data-redis
spec:
  selector:
    matchLabels:
      app: redis
  serviceName: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      volumes:
        - name: data-redis
          persistentVolumeClaim:
            claimName: data-redis-pvc
      containers:
        - name: redis
          image: redis:latest
          ports:
            - containerPort: 6379
          volumeMounts:
            - mountPath: /data
              name: data-redis
          resources:
            limits:
              cpu: "1"
              memory: "1Gi"
            requests:
              cpu: "0.5"
              memory: "200Mi"

---
apiVersion: v1
kind: Service
metadata:
  name: data-redis
spec:
  selector:
    app: redis
  ports:
    - port: 6379
  type: NodePort
  externalIPs:
    - 192.168.1.131

---


apiVersion: v1
kind: PersistentVolume
metadata:
  name: data-es-pv
spec:
  capacity:
    storage: 1G
  persistentVolumeReclaimPolicy: Retain
  nfs:
    path: /nas/data/es
    server: dev
  accessModes:
    - ReadWriteOnce
    - ReadOnlyMany
---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: data-es-pvc
spec:
  resources:
    requests:
      storage: 1G
  accessModes:
    - ReadWriteOnce
  storageClassName: ""

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: data-es
spec:
  selector:
    matchLabels:
      app: es
  serviceName: es
  template:
    metadata:
      labels:
        app: es
    spec:
      volumes:
        - name: data-es
          persistentVolumeClaim:
            claimName: data-es-pvc
      containers:
        - name: es
          image: elasticsearch:7.8.1
          ports:
            - containerPort: 9200
          volumeMounts:
            - mountPath: /usr/share/elasticsearch/data
              name: data-es
          env:
            - name: discovery.type
              value: single-node
            - name: xpack.security.enabled
              value: "true"
          resources:
            limits:
              cpu: "1"
              memory: "2Gi"
            requests:
              cpu: "0.5"
              memory: "500Mi"

---
apiVersion: v1
kind: Service
metadata:
  name: data-es
spec:
  selector:
    app: es
  ports:
    - port: 9200
  type: NodePort
  externalIPs:
    - 192.168.1.131
---


apiVersion: v1
kind: PersistentVolume
metadata:
  name: data-mongo-mongo
spec:
  capacity:
    storage: 1G
  persistentVolumeReclaimPolicy: Retain
  nfs:
    path: /nas/data/mongo
    server: dev
  accessModes:
    - ReadWriteOnce
    - ReadOnlyMany
---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: data-mongo-pvc
spec:
  resources:
    requests:
      storage: 1G
  accessModes:
    - ReadWriteOnce
  storageClassName: ""

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: data-mongo
spec:
  selector:
    matchLabels:
      app: mongo
  serviceName: mongo
  template:
    metadata:
      labels:
        app: mongo
    spec:
      volumes:
        - name: data-mongo
          persistentVolumeClaim:
            claimName: data-mongo-pvc
      containers:
        - name: mongo
          image: mongo:4.4.0-bionic
          ports:
            - containerPort: 27017
          volumeMounts:
            - mountPath: /data/db
              name: data-mongo
          env:
            - name: MONGO_INITDB_ROOT_USERNAME
              value: root
            - name: MONGO_INITDB_ROOT_PASSWORD
              value: example2020!@#
          resources:
            limits:
              cpu: "1"
              memory: "2Gi"
            requests:
              cpu: "0.5"
              memory: "500Mi"

---
apiVersion: v1
kind: Service
metadata:
  name: data-mongo
spec:
  selector:
    app: mongo
  ports:
    - port: 27017
  type: NodePort
  externalIPs:
    - 192.168.1.131
---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: data-mongo-express
spec:
  selector:
    matchLabels:
      app: mongo-express
  serviceName: mongo-express
  template:
    metadata:
      labels:
        app: mongo-express
    spec:
      containers:
        - name: mongo-express
          image:  mongo-express:latest
          ports:
            - containerPort: 8081
          env:
            - name: ME_CONFIG_MONGODB_ADMINUSERNAME
              value: root
            - name: ME_CONFIG_MONGODB_ADMINPASSWORD
              value: example2020!@#
            - name: ME_CONFIG_MONGODB_SERVER
              value: data-mongo
---
apiVersion: v1
kind: Service
metadata:
  name: data-mongo-express
spec:
  selector:
    app: mongo-express
  ports:
    - port: 8081
  type: NodePort
  externalIPs:
    - 192.168.1.131

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: data-activemq-pv
spec:
  capacity:
    storage: 1Gi
  persistentVolumeReclaimPolicy: Retain
  accessModes:
    - ReadWriteOnce
  nfs:
    path: /nas/data/activemq
    server: dev
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: data-activemq-pvc
spec:
  resources:
    requests:
      storage: 1Gi
  accessModes:
    - ReadWriteOnce
  storageClassName: ""
---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: data-activemq
spec:
  selector:
    matchLabels:
      app: data-activemq
  serviceName: data-activemq
  template:
    metadata:
      labels:
        app: data-activemq
    spec:
      volumes:
        - name: data-activemq
          persistentVolumeClaim:
            claimName: data-activemq-pvc
      containers:
        - name: data-activemq
          image: activemq:latest
          volumeMounts:
            - mountPath: /app/data
              name: data-activemq
          ports:
            - containerPort: 8161
            - containerPort: 61616
---
apiVersion: v1
kind: Service
metadata:
  name: data-activemq
spec:
  selector:
    app: data-activemq
  ports:
    - port: 8161
      name: admin
    - port: 61616
      name: tcp
  externalIPs:
    - 192.168.1.131
  type: NodePort
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: data-rabbitmq
spec:
  selector:
    matchLabels:
      app: data-rabbitmq
  serviceName: data-rabbitmq
  template:
    metadata:
      labels:
        app: data-rabbitmq
    spec:
      containers:
        - name: data-rabbitmq
          image: rabbitmq:3.8.7-management-alpine
          ports:
            - containerPort: 5672
            - containerPort: 15672
          env:
            - name: RABBITMQ_DEFAULT_USER
              value: admin
            - name: RABBITMQ_DEFAULT_PASS
              value: admin
---
apiVersion: v1
kind: Service
metadata:
  name: data-rabbitmq
spec:
  selector:
    app: data-rabbitmq
  ports:
    - port: 5672
      name: tcp
    - port: 15672
      name: admin
  externalIPs:
    - 192.168.1.131
  type: NodePort

